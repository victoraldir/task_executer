// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/task_executer/internal/app/task/core/ports (interfaces: InvokerRepository)

// Package ports is a generated GoMock package.
package ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domains "github.com/victoraldir/task_executer/internal/app/task/core/domains"
)

// MockInvokerRepository is a mock of InvokerRepository interface.
type MockInvokerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockInvokerRepositoryMockRecorder
}

// MockInvokerRepositoryMockRecorder is the mock recorder for MockInvokerRepository.
type MockInvokerRepositoryMockRecorder struct {
	mock *MockInvokerRepository
}

// NewMockInvokerRepository creates a new mock instance.
func NewMockInvokerRepository(ctrl *gomock.Controller) *MockInvokerRepository {
	mock := &MockInvokerRepository{ctrl: ctrl}
	mock.recorder = &MockInvokerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvokerRepository) EXPECT() *MockInvokerRepositoryMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockInvokerRepository) Invoke(arg0 []domains.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invoke", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invoke indicates an expected call of Invoke.
func (mr *MockInvokerRepositoryMockRecorder) Invoke(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockInvokerRepository)(nil).Invoke), arg0)
}
