// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/victoraldir/task_executer/pkg/command_manager (interfaces: Receiver)

// Package command is a generated GoMock package.
package command

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockReceiver is a mock of Receiver interface.
type MockReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockReceiverMockRecorder
}

// MockReceiverMockRecorder is the mock recorder for MockReceiver.
type MockReceiverMockRecorder struct {
	mock *MockReceiver
}

// NewMockReceiver creates a new mock instance.
func NewMockReceiver(ctrl *gomock.Controller) *MockReceiver {
	mock := &MockReceiver{ctrl: ctrl}
	mock.recorder = &MockReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReceiver) EXPECT() *MockReceiverMockRecorder {
	return m.recorder
}

// CreateDir mocks base method.
func (m *MockReceiver) CreateDir(arg0 *map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDir indicates an expected call of CreateDir.
func (mr *MockReceiverMockRecorder) CreateDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDir", reflect.TypeOf((*MockReceiver)(nil).CreateDir), arg0)
}

// CreateFile mocks base method.
func (m *MockReceiver) CreateFile(arg0 *map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockReceiverMockRecorder) CreateFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockReceiver)(nil).CreateFile), arg0)
}

// PutContent mocks base method.
func (m *MockReceiver) PutContent(arg0 *map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutContent indicates an expected call of PutContent.
func (mr *MockReceiverMockRecorder) PutContent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContent", reflect.TypeOf((*MockReceiver)(nil).PutContent), arg0)
}

// RemoveDir mocks base method.
func (m *MockReceiver) RemoveDir(arg0 *map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDir indicates an expected call of RemoveDir.
func (mr *MockReceiverMockRecorder) RemoveDir(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDir", reflect.TypeOf((*MockReceiver)(nil).RemoveDir), arg0)
}

// RemoveFile mocks base method.
func (m *MockReceiver) RemoveFile(arg0 *map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFile", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFile indicates an expected call of RemoveFile.
func (mr *MockReceiverMockRecorder) RemoveFile(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFile", reflect.TypeOf((*MockReceiver)(nil).RemoveFile), arg0)
}
